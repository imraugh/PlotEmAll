% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clean_string.R
\name{clean_string}
\alias{clean_string}
\title{Clean string vector}
\usage{
clean_string(
  object,
  sep = ".",
  names = FALSE,
  numlead = FALSE,
  case = c("title", "lower", "upper", "sentence")
)
}
\arguments{
\item{object}{Vector of column names or named vector. If a dataframe is provided, also specify names = TRUE, this is implemented to prevent confusion}

\item{sep}{Value to use to separate alphanumeric characters, default is a period "."}

\item{names}{Clean names of an object? Default is FALSE, use TRUE for objects where the names should be cleaned rather than the values}

\item{numlead}{Should numerical values be allowed at the start of a string? Default is FALSE}

\item{case}{What case should values be returned in? Default is unchanged, cases such as Title Case, lower case, UPPER CASE, or Sentence case supported. Case is implemented before separation, so the only difference between title and sentence is if input includes spaces to separate words.}
}
\description{
Cleans up a given string vector, particularly useful if you have a vector of names you want to work with (e.g., converting lowercase to Sentence case or replacing underscore separators with period separators). Can also be extended to data frames either through providing a dataframe object with names = TRUE or through clean_colnames. Depends on `stringr`.
}
\examples{
test_string <- c(
  "Bm n1sXhl2", "V2DQDwl#XK", "Bs Sd2s lZ", "l9puN&P9vf",
  "JYCaptNr K", "w$ W(NPP(U", "wNmbUDC8dY", "lL\%FqtYYSV",
  "3oLZ9wlpLX", "4Xx\%2gaG S"
)
clean_string(test_string, case = "title", sep = "_")

named_vector <- setNames(
c(1:10), test_string
)
clean_string(named_vector, names = T)

frame <- as.data.frame(matrix(rnorm(100), ncol = 10))
colnames(frame) <- test_string
clean_string(frame, names = T, sep = ".", case = "lower")
# compare with:
clean_colnames(frame, sep = ".", case = "lower")

}
